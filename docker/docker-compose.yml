services:
  api:
    container_name: api
    restart: always
    build: ../.
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    container_name: redis
    restart: always
    image: redis
    command: redis-server
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 5s
      retries: 30
      start_period: 1s
  celery:
    container_name: celery
    restart: always
    build: ../.
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config worker -l info
  celery_beat:
    container_name: celery_beat
    restart: always
    build: ../.
    env_file:
      - ../.env
    depends_on:
      - redis
    command: celery -A config beat -l info

  nginx:
    container_name: nginx
    restart: always
    image: nginx
    ports:
      - '8000:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 1s
    depends_on:
      - api
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    restart: always
    env_file:
      - ../.env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -d postgres' || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 3s
